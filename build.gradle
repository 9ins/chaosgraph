plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

group = "io.github.9ins"
archivesBaseName = "chaosgraph"
version = "2.1.2"
sourceCompatibility = 17
compileJava.options.encoding = 'utf-8'

// Task to generate Javadoc JAR
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

// Task to generate sources JAR
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// Configure the maven-publish plugin to publish to the Maven repository
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact javadocJar
            artifact sourcesJar

            pom {
                name.set('chaosgraph')
                packaging = 'jar'
                description.set('This library contributes to making charts on AWT/Swing/SWT components. It can be used for AWT/Swing applications and Eclipse SWT (Standard Widget Toolkit) applications. If you would try to build a service of RAP dashboard web application, this library will provide great UX experience and excellent interactive functionality to the service for users.')
                url.set('https://github.com/9ins/chaosgraph')

                scm {
                    connection.set('scm:git:https://github.com/9ins/chaosgraph.git')
                    developerConnection.set('scm:git:https://github.com/9ins/chaosgraph.git')
                    url.set('https://github.com/9ins/chaosgraph.git')
                }

                licenses {
                    license {
                        name.set('The Apache License, Version 2.0')
                        url.set('http://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }

                developers {
                    developer {
                        id.set('chaos930')
                        name.set('Kooin Shin')
                        email.set('chaos930@gmail.com')
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        }

        maven {
            name = "snapshots"
            url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(JavaCompile) {
    options.encoding = 'utf-8'
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Updated dependency configurations
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.3'
    implementation 'org.eclipse:draw2d:3.2.100-v20070529'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.4'
    implementation 'org.apache.commons:commons-imaging:1.0-alpha2'
    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'chaosgraph',
                   'Implementation-Version': version
    }
    doFirst {
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
