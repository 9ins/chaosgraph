/**
 * <i>Chaos Graph API </i><br>
 * 이 컨포넌트는 그래프 차트를 그려주는 API입니다.
 * 구성은 라인그래프, 막대그래프, 영역그래프, 원그래프의 4가지 입니다.
 * 이 컨포넌트를 이용하여 개발하는 것을 누구에게나 자유이지만
 * 컨포넌트 자체를 상업적으로 이용할 수 없습니다.
 * 원본의 수정이나 문의사항은 chaos93@hanmail.net으로 연락주십시오.
 */
package org.chaos.graph;

import java.awt.image.renderable.ParameterBlock;
import javax.media.jai.PlanarImage;
import javax.media.jai.JAI;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import com.sun.media.jai.codec.ImageEncoder;
import com.sun.media.jai.codec.ImageCodec;
import java.io.IOException;
import java.io.File;
import java.awt.image.BufferedImage;
import java.util.Enumeration;
/**
* <p>Title: GraphUtility 그래프 유틸리티 클래스</p>
* <p>Description: </p>
* <pre>
* 그래프 이미지를 파일로 저장하는 등의 유틸리티 역할을 수행하는 클래스 이다.
* </pre>
* <p>Copyright: Copyleft (c) 2006</p>
* <p>Company: ChaosToCosmos</p>
* @author 9ins
* @version 1.2, 2006/7/5 최초작성
* @since JDK1.4.1
*/
public class GraphUtility
{
    /**
     * 현재 지원하는 코덱 포멧 리스트
     */
    public static String[] CODEC_LIST = {"PNM", "JPEG", "TIFF", "PNG", "BMP"};
    /**
     * 주어진 그래프 객체와, 저장할 이름으로 이미지를 저장한다.
     * @param graph Graph 그래프 객체
     * @param saveName String 파일로 저장할 이름
     * @throws FileNotFoundException
     * @throws IOException
     * @throws NotSuppotedEncodingFormatException
     * @throws FileNotFoundException
     * @throws IOException
     * @since JDK1.4.1
     */
    public static void saveImage(Graph graph, String saveName) throws
        FileNotFoundException, IOException,
        NotSuppotedEncodingFormatException, FileNotFoundException, IOException
    {
        saveImage(graph.getGraphImage(), new File(saveName));
    }
    /**
     * 주어진 이미지 객체와 파일 객체로 이미지를 저장한다.
     * @param image BufferedImage 이미지 객체
     * @param file File 저장할 파일 객체
     * @throws FileNotFoundException
     * @throws IOException
     * @throws NotSuppotedEncodingFormatException
     * @since JDK1.4.1
     */
    public static void saveImage(BufferedImage image, File file) throws
        FileNotFoundException, IOException, NotSuppotedEncodingFormatException
    {
    	if(!file.exists()) {
    		String path = file.getParent();
    		if(path != null)
    			(new File(path)).createNewFile();
    	}
        Enumeration enu = ImageCodec.getCodecs();
        if(file.getName().trim().equals("") || file == null || file.isDirectory()
           || file.getName().lastIndexOf(".") == -1)
           throw new FileNotFoundException("파일명이 올바르지 않습니다.");
        String filename = file.getName().trim();
        String format = filename.substring(filename.indexOf(".")+1).trim().toUpperCase();
        if(format.equals("JPG"))
            format = "JPEG";
        boolean is = false;
        for(int i=0; i<CODEC_LIST.length; i++)
        {
            if(CODEC_LIST[i].equals(format))
            {
                is = true;
                break;
            }
        }
        if(!is)
            throw new NotSuppotedEncodingFormatException("지원하지 않는 엔코딩 타입니다.");
        ParameterBlock pb = new ParameterBlock();
        pb.add(image);
        PlanarImage tPlanarImage = (PlanarImage)JAI.create("awtImage", pb );
        OutputStream tOutput = new FileOutputStream(file);
        ImageCodec ic = ImageCodec.getCodec(format);
        ImageEncoder tEncoder = ic.createImageEncoder(format, tOutput,  null);
        tEncoder.encode(tPlanarImage);
        tOutput.close();
    }
}
