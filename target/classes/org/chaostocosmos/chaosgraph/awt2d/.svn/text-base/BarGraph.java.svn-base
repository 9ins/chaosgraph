/**
 * <i>Chaos Graph API </i><br>
 * 이 컨포넌트는 그래프 차트를 그려주는 API입니다.
 * 구성은 라인그래프, 막대그래프, 영역그래프, 원그래프의 4가지 입니다.
 * 이 컨포넌트를 이용하여 개발하는 것을 누구에게나 자유이지만
 * 컨포넌트 자체를 상업적으로 이용할 수 없습니다.
 * 원본의 수정이나 문의사항은 chaos93@hanmail.net으로 연락주십시오.
 */
package org.chaos.graph;

import java.awt.*;
import java.awt.image.*;
import java.awt.geom.*;
/**
* <p>Title: BarGraph 막대 그래프</p>
* <p>Description:</p>
* 이 클래스는 상위의 Graph클래스를 상속받아 막대그래프를 구현하는 클래스 입니다.
* 이 클래스는 이미지 넓이, 높이등의 정보를 받아 막대그래프를 그려 줍니다.
* <br><br>
* <b>사용예</b>
* <br>
* <pre>
* import java.awt.*;
* import java.awt.image.*;
* import org.chaos.graph.*;
*
* public class GraphExample extends JFrame
* {
*     int width = 800;     //그래프 초기 넓이
*     int height = 600;    //그래프 초기 높이
*
*     //그래프의 X축 인덱스 값 배열 입니다. X축의 기본 단위 입니다.
*     String[] xIndex = {"1","2", "3", "4", "5", "6", "7", "8", "9", "10"};
*
*     //Y축의 인덱스 값 배열 입니다. Y축의 기본단위 값 입니다.
*     float[] yIndex = {10, 20, 0, 30, 40, 110, 55};
*
*     //그래프의 요소 배열 입니다. 아래는 5가지 요소로 구성됩니다.
*     String[] elements = {"kim","lee","so","han","oh"};
*
*     //그래프 요소의 색깔 배열 입니다. 갯수는 위의 요소 배열과 일치해야 합니다.
*     Color[] colors = {new Color(130,180,130), new Color(180,130,130), new Color(180,180,140), new Color(150,150,150), new Color(150,200,158)};
*
*     //그래프 요소 값 2차원 배열 입니다. 막대 그래프 이므로 1차원은 요소 배열과 갯수가 일치 해야 하며
*     //2차원은 X축 인덱스와 갯수가 일치해야 합니다. 위의 요소배열의 길이가 5이므로
*     //아래와 같이 1차원 배열은 5개 이여야 합니다.
*     float[][] values = {{44,35,0,32,0,33,29,43,25,22,32,43,23},
*                         {43,25,0,32,0,23,52,32,32,23,54,23,48},
*                         {28,93,0,49,0,24,93,63,92,84,69,46,28},
*                         {43,25,0,32,0,23, 9,19,32,70,93,29,15},
*                         {20,36,0,24,22,37,33,54,23,48,53,150,22}};
*
*      //그래프 요소 객체
*      GraphElements ge = null;
*
*      //막대 그래프 객체
*      BarGraph bg = null;
*
*      public GraphExample()
*      {
*          //위의 값들로 그래프 요소 객체를 생성합니다.
*          this.ge = new GraphElements(Graph.BAR_GRAPH, elements, colors, values, xIndex, yIndex);
*
*          //그래프 타이틀 스트링, 이미지 넓이, 높이, 요소 객체로 막대 그래프를 생성합니다.
*          //그래프 객체(아래의 bg)에는 그래프와 관련된 많은 옵션들이 존재합니다. 구체적인 내용은 API 도큐먼트를 참조하세요.
*          this.bg = new BarGraph("Chaos Graph System.", width, height, ge);
*
*          //막대 그래프를 그립니다.
*          bg.drawBarGraph();
*
*          //그래프 이미지 객체를 얻습니다.
*          BufferedImage buffImg = bg.getGraphImage();
*
*          //그래프 패널을 얻는다.
*          GraphPanel panel = bg.getGraphPanel();
*
*          //그래프 패널 객체는 JPanel을 상속받고 있으므로 컨텐트팬이나 다른 컨테이너에 삽입할 수 있습니다.
*          getConetentPane().add(panel, BorderLayout.CENTER);
*
*          //상위 컨테이터인 컨텐트 팬의 하부 컴포넌트를 활성화(validate)시킵니다.
*          getContentPane().validate();
* *
*          //위의 이미지 객체와 패널을 상황에 맞게 활용합니다.
*          //구체적 사용법은 GraphExample1.java, GraphExample2.java를 참조합니다.
*.
*.
*.
*.
*.
*</pre>
*<br>
* <img src="bar.jpg">
* <p>Copyright: Copyleft (c) 2006</p>
* <p>Company: ChaosToCosmos</p>
* @author 9ins
* @version 1.0, 2001/8/13 19:30 최초작성<br>
* @version 1.2, 2006/7/5 생성자 갯수 수정, 그래프 요소객체를 상위클래스인 Graph로 이동,
*                        그래프 사이즈를 조정하는 resizeImage 메소드 구현.<br>
* @since JDK1.4.1
*/
public class BarGraph extends Graph
{
    /**
     * 요소 객체를 인자로 갖는 생성자
     * GraphElements객체의 그래프 타입이 막대 그래프가 아니면 NotMatchGraphTypeException을 발생시킨다.
     * @param ge GraphElements 요소 객체
     * @throws NotMatchGraphTypeException 그래프 타입이 일치하지 않는 경우
     * @since JDK1.4.1
     */
    public BarGraph(GraphElements ge) throws NotMatchGraphTypeException
    {
        this(600, 300, ge);
    }
    /**
     * 이미지 넓이, 높이, 요소객체를 인자로 갖는 생성자
     * GraphElements객체의 그래프 타입이 막대 그래프가 아니면 NotMatchGraphTypeException을 발생시킨다.
     * @param width int 이미지 넓이
     * @param height int 이미지 높이
     * @param ge GraphElements 그래프 요소객체
     * @since JDK1.4.1
     */
    public BarGraph(int width, int height, GraphElements ge) throws
        NotMatchGraphTypeException
    {
        this("", width, height, ge);
    }
    /**
     * 그래프 타이틀 스트링, 이미지 넓이, 높이, 요소객체를 인자로 갖는 생성자.
     * GraphElements객체의 그래프 타입이 막대 그래프가 아니면 NotMatchGraphTypeException을 발생시킨다.
     * @param title 그래프 차트에 그려질 타이틀 스트링
     * @param width int 이미지 넓이
     * @param height int 이미지 높이
     * @param ge GraphElements 그래프 요소 객체
     * @since JDK1.4.1
     */
    public BarGraph(String title, int width, int height, GraphElements ge) throws
        NotMatchGraphTypeException
    {
        super(title, width, height, ge);
        if (ge.getGraphType() != Graph.BAR_GRAPH)
            throw new NotMatchGraphTypeException("GraphElements의 "+getGraphStr(ge.getGraphType())+" 타입으로 이 그래프를 그릴 수 없습니다.");
    }
    /**
     * 그래프의 넓이, 높이, 요소이름, 요소색깔, 값, X인덱스, Y인덱스를 인자로 갖는 생성자.
     * 그래프 요소와 값들을 배열로 입력함
     * @param width int 그래프 넓이
     * @param height int 그래프 높이
     * @param elements String[] 그래프 요소배열
     * @param elementsColor Color[] 그래프 요소별 색깔배열
     * @param values float[][] 그래프 요소 값, 2차원 배열로 1차원의 갯수는 요소의 수와 같아야 한다.
     * @param xIndex x축 String[] 인덱스 배열
     * @param yIndex y축 float[] 인덱스 배열
     * @since JDK1.4.1
     */
    public BarGraph(int width, int height, String[] elements, Color[] elementsColor, float[][] values, String[] xIndex, float[] yIndex) throws NotMatchGraphTypeException,
        NotMatchArrayException
    {
        this("", width, height, new GraphElements(Graph.LINE_GRAPH, elements, elementsColor, values, xIndex, yIndex));
    }
    /**
     * 그래프의 타이틀 스트링, 이미지 넓이, 높이, 요소이름, 요소색깔, 값, X인덱스, Y인덱스를 인자로 갖는 생성자.
     * 그래프 요소와 값들을 배열로 입력함
     * @param title 그래프 차트에 그려질 타이틀 스트링
     * @param width int 이미지 넓이
     * @param height int 이미지 높이
     * @param elements 그래프 요소 배열
     * @param elementsColor 그래프 요소별 색깔 배열
     * @param values 그래프 요소 값, 2차원 배열로 1차원의 갯수는 요소의 수와 같아야 한다.
     * @param xIndex x축 인덱스 배열
     * @param yIndex y축 인덱스 배열
     * @since JDK1.4.1
     */
    public BarGraph(String title, int width, int height, String[] elements, Color[] elementsColor, float[][] values, String[] xIndex, float[] yIndex) throws NotMatchGraphTypeException,
        NotMatchArrayException
    {
        this(title, width, height, new GraphElements(Graph.LINE_GRAPH, elements, elementsColor, values, xIndex, yIndex));
    }
    /**
     * 실제로 설정한 요소와 값들로 그래프를 그리는 메서드.
     * BarGraph 클래스를 생성한 후 반드시 이 메서드를 호출해야 비로소 그래프가 그려진다.
     * @since JDK1.4.1
     */
    public void drawGraph()
    {
        //super.initGraph(super.IMG_WIDTH, super.IMG_HEIGHT);
    	super.sweepBg(super.IMG_WIDTH, super.IMG_HEIGHT);
        int graphType = GRAPH_ELEMENTS.getGraphType();
        Object[] elements = GRAPH_ELEMENTS.getElements();
        Color[] elementsColor = GRAPH_ELEMENTS.getElementsColor();
        String[] xIndex = GRAPH_ELEMENTS.getXIndex();
        float[] yIndex = GRAPH_ELEMENTS.getYIndex();
        float maxValue = GRAPH_ELEMENTS.getMax();

        if (IS_SHOW_BG)
        {
            setComposite(IMG_BG_ALPHA, GRAPHICS2D);
            drawBg(IMG_BG_COLOR, GRAPHICS2D); 					//Graph객체의 메서드--배경을 그린다.
            if (IS_SHOW_IMG_BORDER) drawBgBorder(IMG_BORDER_SIZE, IMG_BORDER_COLOR, GRAPHICS2D);
            setComposite(GRAPH_BG_ALPHA, GRAPHICS2D);
            drawGraphBg(GRAPH_BG_COLOR, GRAPHICS2D);
            if (IS_SHOW_GRAPH_BORDER) drawGraphBorder(GRAPH_BORDER_SIZE, GRAPH_BORDER_COLOR, GRAPH_BORDER_SIZE*2, GRAPH_BORDER_SIZE*2, GRAPHICS2D);
        }

        setComposite(GRAPH_XY_ALPHA, GRAPHICS2D);
        if (IS_SHOW_GRAPH_XY)
        {
            GRAPHICS2D.setStroke(new BasicStroke(GRAPH_XY_SIZE, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            drawXY(GRAPH_XY_SIZE, GRAPH_XY_COLOR, GRAPHICS2D);					//x, y축을 그린다.
        }

        setComposite(INDEX_FONT_ALPHA, GRAPHICS2D);
        if (IS_SHOW_INDEX_X)
        {
            drawIndexX(graphType, FONT_NAME, INDEX_FONT_SIZE, INDEX_FONT_COLOR, xIndex, GRAPHICS2D); //인덱스를 그린다.--Graph의 추상메서드로 반드시 재정의 해주어야 한다.
        }
        if (IS_SHOW_INDEX_Y)
        {
            drawIndexY(FONT_NAME, INDEX_FONT_SIZE, INDEX_FONT_COLOR, yIndex, LIMIT, maxValue, GRAPHICS2D); //인덱스를 그린다.--Graph의 추상메서드로 반드시 재정의 해주어야 한다.
        }

        setComposite(GRID_ALPHA, GRAPHICS2D);
        if (IS_SHOW_GRID_X)
        {
            GRAPHICS2D.setStroke(new BasicStroke(GRID_SIZE, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            drawGridX(xIndex, GRID_X_COLOR, GRID_STYLE, GRAPHICS2D);
        }
        if (IS_SHOW_GRID_Y)
        {
            GRAPHICS2D.setStroke(new BasicStroke(GRID_SIZE, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            drawGridY(yIndex, GRID_Y_COLOR, GRID_STYLE, LIMIT, maxValue, GRAPHICS2D);
        }

        float[][] values = GRAPH_ELEMENTS.getElementsValues();
        float tab = GRAPH_WIDTH/(xIndex.length);
        float width = tab/elements.length-2;

        GRAPHICS2D.setStroke(new BasicStroke(BORDER_SIZE, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        GRAPHICS2D.setClip((int)GRAPH_X, (int)(GRAPH_Y-GRAPH_HEIGHT), (int)GRAPH_WIDTH, (int)GRAPH_HEIGHT);
        for (int j=0; j<elements.length; j++)
        {
            for (int i=0; i<values[j].length; i++)
            {
                float x = ((i+1)*tab-tab/2)+width*j+GRAPH_X+1;
                x = (x < 1)?1:x;
                if (values[j][i] < 0) continue;
                float height = (LIMIT < maxValue)?values[j][i]*GRAPH_HEIGHT/maxValue:values[j][i]*GRAPH_HEIGHT/LIMIT;
                float y = GRAPH_Y-height;
                
                if (y<GRAPH_Y && x>GRAPH_X)
                {
                    if (IS_SHOW_SHADOW)
                    {
                        color(SHADOW_COLOR, GRAPHICS2D);
                        setComposite(SHADOW_ALPHA, GRAPHICS2D);
                        float x1 = (float)Math.cos(Math.toRadians(-(double)SHADOW_ANGLE))*SHADOW_DIST + x;
                        float y1 = (float)Math.sin(Math.toRadians(-(double)SHADOW_ANGLE))*SHADOW_DIST + y;
                        GRAPHICS2D.fill(new Rectangle2D.Float(x1, y1, width, height-SHADOW_DIST));
                    }
                    if (elementsColor[j] != null) color(elementsColor[j], GRAPHICS2D);
                    setComposite(GRAPH_ALPHA, GRAPHICS2D);
                    GRAPHICS2D.fill(new Rectangle2D.Float(x, y, width, height));
                    if (IS_SHOW_BORDER)
                    {
                        color(BORDER_COLOR, GRAPHICS2D);
                        GRAPHICS2D.draw(new Rectangle2D.Float(x, y, width, height));
                    }
                }
            }
        }
        GRAPHICS2D.setClip(0, 0, IMG_WIDTH, IMG_HEIGHT);

        setComposite(LABEL_BG_ALPHA, GRAPHICS2D);
        if (IS_SHOW_LABEL)
        {
            drawLabel(FONT_NAME, LABEL_FONT_SIZE, Font.BOLD, LABEL_BG_COLOR, elements, elementsColor, GRAPHICS2D); 	//라벨의 그린다.--Graph의 메서드
        }

        setComposite(TITLE_FONT_ALPHA, GRAPHICS2D);
        if (IS_SHOW_TITLE)
        {
            drawTitle(TITLE, FONT_NAME, TITLE_FONT_SIZE, TITLE_FONT_COLOR, GRAPHICS2D);
            drawRight(GRAPHICS2D);
        }
        
        if(this.GRAPH_PANEL != null)
        	GRAPH_PANEL.setGraphImage(super.GRAPH_IMAGE);
    }
    /**
     * 이미지 사이즈를 변경 한다.
     * @param width int 새넓이
     * @param height int 새높이
     * @since JDK1.4.1
     */
    public void resizeImage(int width, int height)
    {
        if(!super.IS_IMG_FIXED)
        {
            super.IMG_WIDTH = width;
            super.IMG_HEIGHT = height;
        }
        drawGraph();        
    }
}
